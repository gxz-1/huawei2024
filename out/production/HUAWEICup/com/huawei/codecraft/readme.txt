开发提示：
    Main.test()内部搭建好了测试框架，可以在main首行取消注释.test()来运行
    跑分前注释掉.test(),就可以跑分。

问题日志：
    ？机器人到泊位放下货物时会卡一下-导致20%~50%的移速减少：
        ！修改A*算法的blockmap逻辑:
            ! 1.增加findpathCommands方法，利用寻路器内部地图来寻路

            ! 2.修改addblocks和deleteBlocks方法设置寻路器地图

            ! 3.修改Main，init()时创建Astar寻路器作为全局的实例变量，涉及寻路和避人寻路的地方都改用这个寻路器。
                x 8号机器人从(95,115)寻路到(82,115)时，探测的(94,115)节点实际是障碍，程序中却认为是空地.可能因为添加后续机器人占用位置时，把地图障碍也添加为机器人占用位置了，导致清空占用位置时把地图障碍也清空了。
                    !我调整为机器人只占用非障碍位置

                ?robot 3 在 6000帧 在（113，153）-> (96,140)泊位的途中，mvPath（44）提取被取空。导致输出null
                    ！回滚到寻路帧，查看发生了什么。.6011/6025, mvPath减小，但是x，y未变.然后mvPath便会输出错误的指令，导致机器人撞墙。可能是由于卡帧导致机器人poll了mvpath却未能移动。
                        ？6044帧，机器人mvPath突然为0，因为碰撞恢复后重新寻路时，另外一个碰撞机器人生成的虚拟障碍恰好堵住了所有寻路路线。
                            ！不应该假设重新寻路时必然存在路线，应当尝试寻路，当不存在路线时，便不修改mvPath，已调整
                        ？mvPath提取被取空，机器人会输出move null
                            !如果提前被取空，重新寻路







    ？机器人要撞了恢复后才会绕行。所以机器人会义无反顾地冲向事故地点加塞：
        ！添加全局变量长期碰撞点列表，将事故机器人设置为障碍，使得其它机器人寻路时能绕行。，

    ？机器人从泊位找货物是找货物清单中曼哈顿最近但可能实际最远。
        ！能否用广度优先找最近10个货物再取最划算的？

    ？如果机器人一开始分布紧凑，会不会导致机器人集中在少数几个泊位？有的泊位就空置浪费，进而导致船运力的浪费？
